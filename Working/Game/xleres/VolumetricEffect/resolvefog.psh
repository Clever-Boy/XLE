// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#include "VolumetricFog.h"
#include "../TransformAlgorithm.h"
#include "../CommonResources.h"
#include "../Lighting/BasicLightingEnvironment.h"

#if MSAA_SAMPLERS != 0
	#define Texture2D_MaybeMS	Texture2DMS
#else
 	#define Texture2D_MaybeMS	Texture2D
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 LoadFloat4(Texture2DMS<float4> textureObject, int2 pixelCoords, int sampleIndex)
{
	return textureObject.Load(pixelCoords, sampleIndex);
}

float LoadFloat1(Texture2DMS<float> textureObject, int2 pixelCoords, int sampleIndex)
{
	return textureObject.Load(pixelCoords, sampleIndex);
}

float4 LoadFloat4(Texture2D<float4> textureObject, int2 pixelCoords, int sampleIndex)
{
	return textureObject.Load(int3(pixelCoords, 0));
}

float LoadFloat1(Texture2D<float> textureObject, int2 pixelCoords, int sampleIndex)
{
	return textureObject.Load(int3(pixelCoords, 0));
}

static float3 GetDirectionToSun()
{
	return BasicLight[0].NegativeDirection;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SystemInputs
{
	#if MSAA_SAMPLES > 1
		uint sampleIndex : SV_SampleIndex;
	#endif
};

#if MSAA_SAMPLES > 1
	uint GetSampleIndex(SystemInputs inputs) { return inputs.sampleIndex; }
#else
	uint GetSampleIndex(SystemInputs inputs) { return 0; }
#endif

Texture2D_MaybeMS<float>	DepthTexture	 	: register(t4);

#if (MONOCHROME_INSCATTER==1)
	Texture3D<float>		InscatterTexture	: register(t7);
#else
	Texture3D<float4>		InscatterTexture	: register(t7);
#endif
Texture3D<float>			TransmissionTexture	: register(t8);

Texture2D<float> 			LookupTable 		: register(t10);

float SampleTransmission(float2 coords, float slice) 	{ return TransmissionTexture.SampleLevel(ClampingSampler, float3(coords, slice), 0.f); }
float SampleInscatter(float2 coords, float slice) 		{ return InscatterTexture.SampleLevel(ClampingSampler, float3(coords, slice), 0.f); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

cbuffer LookupTableConstants
{
	float LookupTableMaxValue;
	float LookupTableMaxDistance;
}

float CalculatePartialInscatter(float distance, float densScale)
{
	const bool usePrecalculatedDensity = true;
	if (usePrecalculatedDensity) {
		return LookupTableMaxValue * LookupTable.SampleLevel(
			ClampingSampler, float2(distance / LookupTableMaxDistance, densScale), 0);
	} else {
		float result = 0.f;
		const uint stepCount = 256;
		const float stepDistance = distance / float(stepCount);
		float t = 1.f; // exp(-Density * stepDistance);
		for (uint c=0; c<stepCount; ++c) {
			result += t * stepDistance * densScale * Density;
			t *= exp(-Density * densScale * stepDistance);
		}
		return result;
	}
}

float CalculateInscatter(float distance)
{
	return CalculatePartialInscatter(distance, 1.f);
}

void CalculateTransmissionAndInscatter(float3 rayStart, float3 rayEnd, out float transmissionValue, out float inscatter)
{
	float3 diff = rayStart - rayEnd;
	float diffLen = length(diff);

	if (rayEnd.z < rayStart.z) {

			// Ray is pointing down. Camera might be outside of the volume, and we're
			// looking into it.
		float maxDensityDistance = 0.f;
		if (rayEnd.z < HeightEnd)
			maxDensityDistance =
				diffLen * min(1.f, (HeightEnd - rayEnd.z) / (rayStart.z - rayEnd.z));

		float a = saturate((HeightEnd   - rayEnd.z) / (rayStart.z - rayEnd.z));
		float b = saturate((HeightStart - rayEnd.z) / (rayStart.z - rayEnd.z));
		float ha = (lerp(rayEnd.z, rayStart.z, a) - HeightEnd) / (HeightStart - HeightEnd);
		float hb = (lerp(rayEnd.z, rayStart.z, b) - HeightEnd) / (HeightStart - HeightEnd);

			// We need to calculate an integral of density against distance for the ray
			// as it passes through the area where the falls off!
			// Fortunately, it's easy... The fog falls off linearly with height. So the
			// integral is just average of the density at the start and at the end (if the
			// camera is outside, that average should just be half the desnity value).
			// Distance within the partial area is easy, as well... We just have to handle the
			// situation where the camera is within the fog.
		float aveDensity = (lerp(Density, 0.f, ha) + lerp(Density, 0.f, hb)) * 0.5f;
		float partialDistance = abs(b - a) * diffLen;

		transmissionValue = exp(-aveDensity * partialDistance - Density * maxDensityDistance);

			// Calculate the inscattered light. This is a little more difficult than the
			// transmission coefficient!
			// Light scatters in proportional to distance (and proportional to density in
			// the partial section).
			// However occlusion should also apply to the inscattered light (ie, the transmission
			// coefficient should take effect). The inscattered light can turn out to be a lot of
			// light, so this is can important step. But the math is a bit more complex.
		inscatter = CalculateInscatter(maxDensityDistance);
		inscatter *= exp(-aveDensity * partialDistance);

			// rough estimate for inscatter in the partial area...
			// this is a cheap hack, but it works surprisingly well!
		inscatter += CalculatePartialInscatter(partialDistance, aveDensity / Density);

	} else {

			// Ray is pointing up. Camera might be inside of the volume, and we're
			// looking out of it.
		float maxDensityDistance = 0.f;
		if (rayStart.z < HeightEnd)
			maxDensityDistance =
				diffLen * min(1.f, (HeightEnd - rayStart.z) / (rayEnd.z - rayStart.z));

		float a = saturate((HeightEnd   - rayEnd.z) / (rayStart.z - rayEnd.z));
		float b = saturate((HeightStart - rayEnd.z) / (rayStart.z - rayEnd.z));
		float ha = (lerp(rayEnd.z, rayStart.z, a) - HeightEnd) / (HeightStart - HeightEnd);
		float hb = (lerp(rayEnd.z, rayStart.z, b) - HeightEnd) / (HeightStart - HeightEnd);

		float aveDensity = (lerp(Density, 0.f, ha) + lerp(Density, 0.f, hb)) * 0.5f;
		float partialDistance = abs(b - a) * diffLen;

		transmissionValue = exp(-aveDensity * partialDistance - Density * maxDensityDistance);

		inscatter = CalculateInscatter(maxDensityDistance);
		inscatter += exp(-Density * maxDensityDistance) * CalculatePartialInscatter(partialDistance, aveDensity / Density);

	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 ResolveFog(
	float4 position : SV_Position,
	float2 texCoord : TEXCOORD0,
	float3 viewFrustumVector : VIEWFRUSTUMVECTOR,
	SystemInputs sys) : SV_Target0
{
	// return float4(0.0.xxx, 1);

	int2 pixelCoords		= position.xy;
	float depth				= LoadFloat1(DepthTexture, pixelCoords.xy, GetSampleIndex(sys));
	float worldSpaceDepth	= NDCDepthToWorldSpace(depth);

	float slice	= worldSpaceDepth / WorldSpaceGridDepth;

	float transmission = 1.f;
	float inscatter = 0.f;

	if (slice > 1.f) {
		float3 gridEnd = CalculateWorldPosition(viewFrustumVector, WorldSpaceGridDepth / FarClip, WorldSpaceView);
		float3 worldPosition = CalculateWorldPosition(viewFrustumVector, NDCDepthToLinear0To1(depth), WorldSpaceView);
		CalculateTransmissionAndInscatter(gridEnd, worldPosition, transmission, inscatter);

		#if (MONOCHROME_INSCATTER!=1)
			inscatter *= .1f * ForwardColour;
		#endif
	}

	slice = DepthBiasInvEq(saturate(slice));

	float gridTransmission = SampleTransmission(texCoord, slice);
	float gridInscatter = SampleInscatter(texCoord, slice);

	inscatter = inscatter * gridTransmission + gridInscatter;
	transmission *= gridTransmission;

	#if (MONOCHROME_INSCATTER==1)

			// In theory, this might not be as accurate... Because we're
			// assuming the inscattering coefficient is the same all along
			// the ray. For long rays (in particular) this shouldn't really
			// be true. But the visual result is very close. So it seems
			// like calculate the scattering coefficient at every point along
			// the ray is redundant.
			// Note that we don't really need to do this calculation at a per
			// pixel level. We could calculate it as the same resolution as the
			// simulation grid (perhaps writing into a 2d texture from the same
			// compute shader). But we need the value for distance scattering, so
			// it can't just be integrated into the InscatterTexture

		float3 directionToSun = GetDirectionToSun();
		float3 directionToSample = viewFrustumVector;
		float directionToSampleRLength = rsqrt(dot(directionToSample, directionToSample));
		float cosTheta = dot(directionToSun, directionToSample) * directionToSampleRLength;

		float3 colour = lerp(ForwardColour, BackColour, 0.5f + 0.5f * cosTheta);
		inscatter *= MonochromeRaleighScattering(cosTheta);

		return float4(inscatter * colour, transmission);

	#else
		return float4(inscatter, transmission);
	#endif
}
