
Texture2D InputTexture;

static const float SharrConstant = 1.f/60.f;

static const float SharrHoriz5x5[5][5] = 
{
	{ -1.f * SharrConstant, -1.f * SharrConstant,  0.f,  1.f * SharrConstant,  1.f * SharrConstant },
	{ -2.f * SharrConstant, -2.f * SharrConstant,  0.f,  2.f * SharrConstant,  2.f * SharrConstant },
	{ -3.f * SharrConstant, -6.f * SharrConstant,  0.f,  6.f * SharrConstant,  3.f * SharrConstant },
	{ -2.f * SharrConstant, -2.f * SharrConstant,  0.f,  2.f * SharrConstant,  2.f * SharrConstant },
	{ -1.f * SharrConstant, -1.f * SharrConstant,  0.f,  1.f * SharrConstant,  1.f * SharrConstant }
};

static const float SharrVert5x5[5][5] = 
{
	{ -1.f * SharrConstant, -2.f * SharrConstant, -3.f * SharrConstant, -2.f * SharrConstant, -1.f * SharrConstant },
	{ -1.f * SharrConstant, -2.f * SharrConstant, -6.f * SharrConstant, -2.f * SharrConstant, -1.f * SharrConstant },
	{  0.f * SharrConstant,  0.f * SharrConstant,  0.f * SharrConstant,  0.f * SharrConstant,  0.f * SharrConstant },
	{  1.f * SharrConstant,  2.f * SharrConstant,  6.f * SharrConstant,  2.f * SharrConstant,  1.f * SharrConstant },
	{  1.f * SharrConstant,  2.f * SharrConstant,  3.f * SharrConstant,  2.f * SharrConstant,  1.f * SharrConstant }
};

float4 main(float4 pos : SV_Position) : SV_Target0
{
		//	using a sharr convolution to find the edges of the shapes in "InputTexture",
		//	we'll write out an outline highlight
		//
		//	This is not the most efficient way to do this... The sharr filter should be
		//	separable. But this implementation was intended for non-performance critical
		//	purposes, and convenient to do this it this way.

	int2 basePos = int2(pos.xy);

	float2 dhdp = 0.0.xx;
	for (int y=0; y<5; ++y) {
		for (int x=0; x<5; ++x) {
				//	We need to convert the input colour values to some 
				//	kind of scalar. We could use luminance. But if we 
				//	just want to find the outline of a rendered area,
				//	then we can use the alpha channel
			float value = InputTexture.Load(int3(basePos, 0), int2(x-2, y-2)).a;
			dhdp.x += SharrHoriz5x5[x][y] * value;
			dhdp.y += SharrVert5x5[x][y] * value;
		}
	}

	float alpha = max(abs(dhdp.x), abs(dhdp.y));
	float3 baseColor = float3(1.5f, 1.35f, .7f);
	return float4(alpha * baseColor, alpha);
}


