// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#include "SharrFilter.h"

float3 OutlineColour;
uint4 HighlightMarker;
uint4 StencilToMarkerMap[256];

// This is a random but distinct set of colours generated from
// 		http://phrogz.net/css/distinct-colors.html
static const uint ColourListCount = 47;
static const uint3 ColourList[47] =
{
	uint3(217,0,79), uint3(0,81,255), uint3(234,255,0), uint3(127,28,0), uint3(239,61,242),
	uint3(48,155,191), uint3(29,115,43), uint3(76,44,19), uint3(77,101,153), uint3(115,57,57),

	uint3(191,225,255), uint3(217,198,163), uint3(89,0,71), uint3(0,77,62), uint3(255,166,0),
	uint3(89,0,0), uint3(35,46,140), uint3(19,62,77), uint3(31,51,13), uint3(153,77,105),

	uint3(195,204,102), uint3(191,143,151), uint3(86,114,115), uint3(64,55,48), uint3(42,0,77),
	uint3(0,179,30), uint3(89,58,0), uint3(51,13,27), uint3(16,31,64), uint3(54,211,217),

	uint3(178,132,45), uint3(146,83,166), uint3(86,89,45), uint3(240,191,255), uint3(172,230,219),
	uint3(204,164,153), uint3(64,0,191), uint3(13,255,0), uint3(229,50,0), uint3(230,57,158),

	uint3(64,166,255), uint3(51,204,143), uint3(191,110,48), uint3(121,133,242), uint3(255,155,128),
	uint3(79,67,89), uint3(135,166,124)
};

#define INPUT_MODE 1

#if INPUT_MODE == 0
	Texture2D<uint>		StencilInput;
#elif INPUT_MODE == 1
 	Texture2D		StencilInput;
#endif

static const uint DummyMarker = 0xffffffff;

uint GetHighlightMarker()
{
	return HighlightMarker.x;
}

uint Marker(uint2 pos)
{
	#if INPUT_MODE == 0
		uint stencilValue = StencilInput.Load(uint3(pos, 0));
	#elif INPUT_MODE == 1
		uint stencilValue = uint(255.f * StencilInput.Load(uint3(pos, 0)).a);
	#endif
	if (stencilValue == 0) { return DummyMarker; }

	uint result = StencilToMarkerMap[stencilValue%256].x;
	#if ONLY_HIGHLIGHTED!=0
			// in this mode, we ignore every material except the highlighted one
		if (result != GetHighlightMarker()) {
			result = DummyMarker;
		}
	#endif
	return result;
}

bool HatchFilter(uint2 position)
{
	uint p = uint(position.x) + uint(position.y);
	return ((p/4) % 3) == 0;
}

float4 HighlightByStencil(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	if (!HatchFilter(position.xy)) { discard; }

	uint marker = Marker(uint2(position.xy));
	if (marker == DummyMarker) { discard; }

	uint3 c = ColourList[marker%ColourListCount];
	return float4(.5f*c.r/255.f, .5f*c.g/255.f, .5f*c.b/255.f, .5f*1.f);
}

float4 OutlineByStencil(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	uint2 basePos = uint2(position.xy);
	uint testMarker = Marker(int2(basePos));

	float2 dhdp = 0.0.xx;
	[unroll] for (int y=0; y<5; ++y) {
		[unroll] for (int x=0; x<5; ++x) {
			uint marker = Marker(int2(basePos) + int2(x-2, y-2));
			float value = (marker == testMarker);
			dhdp.x += SharrHoriz5x5[x][y] * value;
			dhdp.y += SharrVert5x5[x][y] * value;
		}
	}

	float alpha = max(abs(dhdp.x), abs(dhdp.y));
	alpha = 1.0f - pow(1.0f-alpha, 8.f);
	return float4(alpha * OutlineColour, alpha);
}
