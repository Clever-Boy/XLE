// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#include "../MainGeometry.h"
#include "../CommonResources.h"
#include "../Surface.h"
#include "../Colour.h"
#include "../BasicMaterial.h"

Texture2D<float> OpacityTexture;
Texture2D<float> CustomTexture;

cbuffer BasicLightingEnvironment
{
	float3 SunLightNegativeDirection;
	float3 SunLightColor;
	float3 Ambient;
}

cbuffer ObjectAmbientBuffer : register(b7)
{
	float4 PerObjectAmbient;
}

#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
float4 main(VSOutput geo) : SV_Target0
{
	DoAlphaTest(geo);
	float4 result = 1.0.xxxx;
	float opacityTextureValue = 1.f;
	#if OUTPUT_TEXCOORD==1
		result = DiffuseTexture.Sample(MaybeAnisotropicSampler, geo.texCoord);

		#if OUTPUT_BLEND_TEXCOORD==1
			float4 secondarySample = DiffuseTexture.Sample(MaybeAnisotropicSampler, geo.blendTexCoord.xy);
			result = lerp(result, secondarySample, geo.blendTexCoord.z);
		#endif

		#if RES_HAS_OPACITY_MAP==1
			opacityTextureValue = OpacityTexture.Sample(DefaultSampler, geo.texCoord);
		#endif
	#endif
	#if OUTPUT_COLOUR==1
		#if MAT_IGNORE_TEXTURE_COLOR==1
			result.rgb = geo.colour.rgb;
		#else
			result *= float4(geo.colour.rgb,1);
		#endif
		#if MAT_MODULATE_VERTEX_ALPHA
			result.a *= geo.colour.a;
		#endif
	#endif

  result.rgb *= MaterialDiffuse.rgb;

	#if MAT_DO_PARTICLE_LIGHTING==1
		float4 baseColor = result;

			// Very basic lighting (from the sun only)
		float3 normal = GetNormal(geo);
		float lambert = saturate(dot(normal, SunLightNegativeDirection));
		float3 diffuseLightingColor = SunLightColor * lambert;
		float3 diffuseAndAmbient = (diffuseLightingColor + PerObjectAmbient);

		float3 finalColor = (diffuseLightingColor * PerObjectAmbient.a) + PerObjectAmbient;
		finalColor *= baseColor.rgb;
		// finalColor *= baseColor.a;

		#if RES_HAS_CUSTOM_MAP==1
			float3 vView	= normalize(-geo.worldViewVector);
			float fNdotE	= dot(vView.xyz, normal.xyz);
			float3 vReflVec = (2.f * fNdotE * normal.xyz) - vView.xyz;
			float3 specular = CustomTexture.Sample(DefaultSampler, SpecBumpScale * vReflVec.xy);
			finalColor.rgb += specular * SpecMultiplier * MaterialSpecular * diffuseAndAmbient;
		#endif

		result.rgb = finalColor;

	#else

			// basic stand-in lighting
		result.rgb *= .25f + 0.75f * saturate(dot(GetNormal(geo), NegativeDominantLightDirection));

	#endif

	#if OUTPUT_FOG_COLOR == 1
		result.rgb = lerp(geo.fogColor.rgb, result.rgb, geo.fogColor.a);
	#endif

	result.a *= opacityTextureValue;

		//	scale up the values to get a better result
		//	with particles. Normally particles go through
		//	lighting at this stage.
	result.a = saturate(result.a);
	#if MAT_SKIP_LIGHTING_SCALE==0
		result.rgb *= LightingScale;		// (note -- should we scale by this here? when using this shader with a basic lighting pipeline [eg, for material preview], the scale is unwanted)
	#endif
	return result;
}

float4 invalid(VSOutput geo) : SV_Target0
{
	float3 color0 = float3(1.0f, 0.f, 0.f);
	float3 color1 = float3(0.0f, 0.f, 1.f);
	uint flag = (uint(geo.position.x/4.f) + uint(geo.position.y/4.f))&1;
	return float4(flag?color0:color1, 1.f);
}
