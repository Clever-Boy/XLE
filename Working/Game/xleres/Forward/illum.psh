// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#include "../MainGeometry.h"
#include "../Objects/IllumShader/PerPixel.h"

#include "../Lighting/LightDesc.h"
#include "../Lighting/DirectionalResolve.h"
#include "../Lighting/AmbientResolve.h"
#include "../Lighting/BasicLightingEnvironment.h"
#include "../Lighting/ShadowsResolve.h"
#include "../Lighting/CascadeResolve.h"

float3 ResolveLitColor(
	GBufferValues sample, float3 directionToEye,
	float3 worldPosition,
	LightScreenDest screenDest)
{
	float3 result = 0.0.xxx;

	#if (OUTPUT_NORMAL==1)

			// Calculate the shadowing of light sources (where we can)

		float shadowing[BASIC_LIGHT_COUNT];
		{
			[unroll] for (uint c=0; c<BASIC_LIGHT_COUNT; ++c)
				shadowing[c] = 1.f;

			#if SHADOW_CASCADE_MODE!=0
				bool enableNearCascade = false;
				#if SHADOW_ENABLE_NEAR_CASCADE != 0
					enableNearCascade = true;
				#endif

				CascadeAddress cascade = ResolveCascade_FromWorldPosition(worldPosition, GetShadowCascadeMode(), enableNearCascade);
				if (cascade.cascadeIndex >= 0) {
					shadowing[0] = ResolveShadows_Cascade(
						cascade.cascadeIndex, cascade.frustumCoordinates, cascade.miniProjection,
						screenDest.pixelCoords, screenDest.sampleIndex, ShadowResolveConfig_NoFilter());
				}
			#endif
		}

			// note -- 	This loop must be unrolled when using GGX specular...
			//			This is because there are texture look-ups in the GGX
			//			implementation, and those can cause won't function
			//			correctly inside a dynamic loop

		[unroll] for (uint c=0; c<BASIC_LIGHT_COUNT; ++c) {
			result += shadowing[c] * LightResolve_Diffuse(
				sample, directionToEye,
				BasicLight[c].Position, BasicLight[c]);

			result += shadowing[c] * LightResolve_Specular(
				sample, directionToEye,
				BasicLight[c].Position, BasicLight[c]);
		}
	#endif

	result += LightResolve_Ambient(
		sample, directionToEye, BasicAmbient, screenDest.pixelCoords, screenDest.sampleIndex,
		AmbientResolveHelpers_Default());

	return result;
}

#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
float4 main(VSOutput geo, SystemInputs sys) : SV_Target0
{
	DoAlphaTest(geo);

	GBufferValues sample = IllumShader_PerPixel(geo);

	float3 directionToEye = 0.0.xxx;
	#if (OUTPUT_WORLD_VIEW_VECTOR==1)
		directionToEye = normalize(geo.worldViewVector);
	#endif

	float4 result = float4(
		ResolveLitColor(
			sample, directionToEye, GetWorldPosition(geo),
			LightScreenDest_Create(int2(geo.position.xy), GetSampleIndex(sys))), 1.f);

	#if OUTPUT_FOG_COLOR == 1
		result.rgb = lerp(geo.fogColor.rgb, result.rgb, geo.fogColor.a);
	#endif

	result.a = sample.blendingAlpha;

	#if MAT_SKIP_LIGHTING_SCALE==0
		result.rgb *= LightingScale;		// (note -- should we scale by this here? when using this shader with a basic lighting pipeline [eg, for material preview], the scale is unwanted)
	#endif
	return result;
}

float4 invalid(VSOutput geo) : SV_Target0
{
	float3 color0 = float3(1.0f, 0.f, 0.f);
	float3 color1 = float3(0.0f, 0.f, 1.f);
	uint flag = (uint(geo.position.x/4.f) + uint(geo.position.y/4.f))&1;
	return float4(flag?color0:color1, 1.f);
}
