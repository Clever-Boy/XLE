// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#if !defined(RESOLVE_PSH)
#define RESOLVE_PSH

#include "resolveutil.h"
#include "resolvecascade.h"
#include "../CommonResources.h"
#include "../Utility/Misc.h"
#include "../Lighting/SampleFiltering.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////

Texture2D		NoiseTexture	: register(t10);

float4 main(float4 position : SV_Position, SystemInputs sys, float2 texCoord : TEXCOORD0) : SV_Target0
{
	return float4(LoadGBuffer(position, sys).worldSpaceNormal.rgb, 1);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
             //   s h a d o w s   //

Texture2DArray 				ShadowTextures	 	: register(t3);

float4 DebugShadows(float2 texCoord)
{
	float2 t = fmod(texCoord.xy*2.f, 1.0.xx);
	uint index = uint(texCoord.x/.5f) + 2*uint(texCoord.y/.5f);
	float shadowSample =
		ShadowTextures.SampleCmpLevelZero(
			ShadowSampler, float3(t.xy, float(index)),
			0.995f);
	return float4(shadowSample.xxx, 1.f);
}

// #define PACK_FILTER_KERNEL

static const uint FilterKernelSize = 32;

cbuffer ShadowParameters : register(b8)
{
	#if defined(PACK_FILTER_KERNEL)
		float4 FilterKernel[16];
	#else
		float4 FilterKernel[32];
	#endif
}

cbuffer ShadowResolveParameters
{
	float ShadowBiasWorldSpace;
	float TanBlurAngle;
	float MinBlurRadius;
	float MaxBlurRadius;
}

float2 GetRawShadowSampleFilter(uint index)
{
#if MSAA_SAMPLES > 1		// hack -- shader optimiser causes a problem with shadow filtering...
	return 0.0.xx;
#else
	#if defined(PACK_FILTER_KERNEL)	// this only works efficiently if we can unpack all of the shadow loops
		if (index >= 16) {
			return FilterKernel[index-16].zw;
		} else
	#endif
	{
		return FilterKernel[index].xy;
	}
#endif
}

float CalculateShadowCasterDistance(
	float2 texCoords, float comparisonDistance,
	uint arrayIndex, uint msaaSampleIndex,
	float ditherPatternValue)
{
	float accumulatedDistance = 0.0f;
	float accumulatedSampleCount = 0.0001f;

	float angle = 2.f * pi * ditherPatternValue;
	float2 sinCosAngle;
	sincos(angle, sinCosAngle.x, sinCosAngle.y);
	float2x2 rotationMatrix = float2x2(
		float2(sinCosAngle.x, sinCosAngle.y),
		float2(-sinCosAngle.y, sinCosAngle.x));

	// const float filterSize = 16.f / 1024.f;
	const float filterSize = 12.f / 1024.f;
	#if MSAA_SAMPLES <= 1
			//	Undersampling here can cause some horrible artefacts.
			//		In many cases, 4 samples is enough.
			//		But on edges, we can get extreme filtering problems
			//		with few samples.
			//
		const uint sampleCount = 16;
		const uint sampleOffset = 0;
		const uint loopCount = sampleCount / 4;
		const uint sampleStep = FilterKernelSize / sampleCount;
	#else
		const uint sampleCount = 4;		// this could cause some unusual behaviour...
		const uint sampleOffset = msaaSampleIndex; // * (FilterKernelSize-sampleCount) / (MSAA_SAMPLES-1);
		const uint loopCount = sampleCount / 4;
		const uint sampleStep = (FilterKernelSize-MSAA_SAMPLES+sampleCount) / sampleCount;
		[unroll]

	#endif
	for (uint c=0; c<loopCount; ++c) {

			//
			//		Sample the depth texture, using a normal non-comparison sampler
			//
		float2 baseFilter0 = GetRawShadowSampleFilter((c*4+0)*sampleStep+sampleOffset);
		float2 baseFilter1 = GetRawShadowSampleFilter((c*4+1)*sampleStep+sampleOffset);
		float2 baseFilter2 = GetRawShadowSampleFilter((c*4+2)*sampleStep+sampleOffset);
		float2 baseFilter3 = GetRawShadowSampleFilter((c*4+3)*sampleStep+sampleOffset);

		baseFilter0 = mul(rotationMatrix, baseFilter0);
		baseFilter1 = mul(rotationMatrix, baseFilter1);
		baseFilter2 = mul(rotationMatrix, baseFilter2);
		baseFilter3 = mul(rotationMatrix, baseFilter3);

		float4 sampleDepth;
		sampleDepth.x = ShadowTextures.SampleLevel(ShadowDepthSampler, float3(texCoords + filterSize * baseFilter0, float(arrayIndex)), 0).r;
		sampleDepth.y = ShadowTextures.SampleLevel(ShadowDepthSampler, float3(texCoords + filterSize * baseFilter1, float(arrayIndex)), 0).r;
		sampleDepth.z = ShadowTextures.SampleLevel(ShadowDepthSampler, float3(texCoords + filterSize * baseFilter2, float(arrayIndex)), 0).r;
		sampleDepth.w = ShadowTextures.SampleLevel(ShadowDepthSampler, float3(texCoords + filterSize * baseFilter3, float(arrayIndex)), 0).r;

		float4 difference 		 = comparisonDistance.xxxx - sampleDepth;
		float4 sampleCount 		 = difference > 0.0f;					// array of 1s for pixels in the shadow texture closer to the light
		accumulatedSampleCount 	+= dot(sampleCount, 1.0.xxxx);			// count number of 1s in "sampleCount"
			// Clamp maximum distance considered here?
		accumulatedDistance += dot(difference, sampleCount);		// accumulate only the samples closer to the light
	}

		//
		//		finalDistance is the assumed distance to the shadow caster
	float finalDistance = accumulatedDistance / accumulatedSampleCount;
	return finalDistance;
}

float TestShadow(float2 texCoord, uint arrayIndex, float comparisonDistance)
{
		// these two methods should return the same result (and probably have similiar performance...)
	const bool useGatherCmpRed = false;
	if (!useGatherCmpRed) {
		return ShadowTextures.SampleCmpLevelZero(ShadowSampler, float3(texCoord, float(arrayIndex)), comparisonDistance);
	} else {
		float4 t = ShadowTextures.GatherCmpRed(ShadowSampler, float3(texCoord, float(arrayIndex)), comparisonDistance);
		return dot(t, 1.0.xxxx) * 0.25f;
	}
}

float CalculateFilteredShadows(
	float2 texCoords, float comparisonDistance, uint arrayIndex,
	float casterDistance, int2 randomizerValue,
	float2 projectionScale, uint msaaSampleIndex)
{
	const bool usePoissonDiskMethod = false;

		//	In "ShadowsPerspectiveProjection", casterDistance is the difference between 2 NDC depths
		//	Otherwise, casterDistance is world space distance between the sample and caster.
	float filterSize, filterSizePixels;
	if (false) { // ShadowsPerspectiveProjection) {
		filterSize = lerp(0.001f, 0.015f, saturate(casterDistance*30.f));
		filterSize *= .03f * projectionScale.x;		// (note -- projectionScale.y is ignored. We need to have uniform x/y scale to rotate the filter correctly)
		filterSizePixels = filterSize * 1024.f;
	} else {
			//	There are various ways to calculate the filtering distance here...
			//	For example, we can assume the light source is an area light source, and
			//	calculate the appropriate penumbra for that object. But let's just use
			//	a simple method and calculate a fixed penumbra angle
		const float calibratedTextureWidth = 1024.f; // calibrated for 1024x1024 shadow texture
		filterSizePixels  = TanBlurAngle * casterDistance;
		filterSizePixels *= projectionScale.x * (calibratedTextureWidth / 2.f);

		filterSizePixels = min(max(filterSizePixels, MinBlurRadius), MaxBlurRadius);

		filterSize = filterSizePixels / calibratedTextureWidth;
	}

	if (usePoissonDiskMethod) {

		float noiseValue = NoiseTexture.Load(int3(randomizerValue.x & 0xff, randomizerValue.y & 0xff, 0)).r;
		float2 filterRotation;
		sincos(2.f * 3.14159f * noiseValue, filterRotation.x, filterRotation.y);
		filterRotation *= filterSize;

		float2 depthddTC = CalculateShadowLargeFilterBias(comparisonDistance, texCoords);

		const bool doFilterRotation = true;
		float shadowingTotal = 0.f;
		#if MSAA_SAMPLES <= 1
			const uint sampleCount = 32;
			const uint sampleOffset = 0;
			const uint loopCount = sampleCount / 4;
		#else
			const uint sampleCount = 4;		// We will be blending multiple samples, anyway... So minimize sample count for MSAA
			const uint sampleOffset = msaaSampleIndex * (FilterKernelSize-sampleCount) / (MSAA_SAMPLES-1);
			const uint loopCount = sampleCount / 4;
			[unroll]
		#endif
		for (uint c=0; c<loopCount; ++c) {

				// note --	we can use the screen space derivatives of sample position to
				//			bias the offsets here, and avoid some acne artefacts
			float2 filter0 = GetRawShadowSampleFilter(c*4+0+sampleOffset);
			float2 filter1 = GetRawShadowSampleFilter(c*4+1+sampleOffset);
			float2 filter2 = GetRawShadowSampleFilter(c*4+2+sampleOffset);
			float2 filter3 = GetRawShadowSampleFilter(c*4+3+sampleOffset);

			float2 rotatedFilter0, rotatedFilter1, rotatedFilter2, rotatedFilter3;
			if (doFilterRotation) {
				rotatedFilter0 = float2(dot(filterRotation, filter0), dot(float2(filterRotation.y, -filterRotation.x), filter0));
				rotatedFilter1 = float2(dot(filterRotation, filter1), dot(float2(filterRotation.y, -filterRotation.x), filter1));
				rotatedFilter2 = float2(dot(filterRotation, filter2), dot(float2(filterRotation.y, -filterRotation.x), filter2));
				rotatedFilter3 = float2(dot(filterRotation, filter3), dot(float2(filterRotation.y, -filterRotation.x), filter3));
			} else {
				rotatedFilter0 = filterSize*filter0;
				rotatedFilter1 = filterSize*filter1;
				rotatedFilter2 = filterSize*filter2;
				rotatedFilter3 = filterSize*filter3;
			}

			float cDist0 = comparisonDistance + dot(rotatedFilter0, depthddTC);
			float cDist1 = comparisonDistance + dot(rotatedFilter1, depthddTC);
			float cDist2 = comparisonDistance + dot(rotatedFilter2, depthddTC);
			float cDist3 = comparisonDistance + dot(rotatedFilter3, depthddTC);

			float4 sampleDepth;
			sampleDepth.x = TestShadow(texCoords + rotatedFilter0, arrayIndex, cDist0);
			sampleDepth.y = TestShadow(texCoords + rotatedFilter1, arrayIndex, cDist1);
			sampleDepth.z = TestShadow(texCoords + rotatedFilter2, arrayIndex, cDist2);
			sampleDepth.w = TestShadow(texCoords + rotatedFilter3, arrayIndex, cDist3);

			shadowingTotal += dot(sampleDepth, 1.0.xxxx);
		}

		return shadowingTotal * (1.f / float(sampleCount));

	} else {

		float fRatio = saturate(filterSizePixels / float(AMD_FILTER_SIZE));
		return FixedSizeShadowFilter(
			ShadowTextures,
			float3(texCoords, float(arrayIndex)), comparisonDistance, fRatio);

	}
}

static const bool DoShadowFiltering = true;

float ResolveShadows(	uint projection, float2 shadowTexCoord, float comparisonDistance,
						int2 randomizerValue, uint msaaSampleIndex)
{
	float casterDistanceComparison = comparisonDistance;
	float biasedDepth;
	const bool shadowsPerspectiveProj = ShadowsPerspectiveProjection;

		//	Here, we bias the shadow depth using world space units.
		//	This appears to produce more reliable results and variety
		//	of depth ranges.
		//	With perspective projection, it is more expensive than biasing in NDC depth space.
		//	But with orthogonal shadows, it should be very similar
	MiniProjZW miniP = AsMiniProjZW(ShadowProjection_GetMiniProj(projection));
	if (shadowsPerspectiveProj) {
		float worldSpaceDepth = NDCDepthToWorldSpace_Perspective(comparisonDistance, miniP);
		biasedDepth = WorldSpaceDepthToNDC_Perspective(worldSpaceDepth - ShadowBiasWorldSpace, miniP);
	} else {
		biasedDepth = comparisonDistance - WorldSpaceDepthDifferenceToNDC_Ortho(ShadowBiasWorldSpace, miniP);
	}

	// float biasedDepth = comparisonDistance;
	// return TestShadow(shadowTexCoord, projection, biasedDepth);

	float casterDistance = CalculateShadowCasterDistance(
		shadowTexCoord, casterDistanceComparison, projection,
		msaaSampleIndex, DitherPatternValue(randomizerValue));

	if (!shadowsPerspectiveProj) {
			// In orthogonal projection mode, NDC depths are actually linear. So, we can convert a difference
			// of depths in NDC space (like casterDistance) into world space depth easily. Linear depth values
			// are more convenient for calculating the shadow filter radius
		casterDistance = -NDCDepthDifferenceToWorldSpace_Ortho(casterDistance, miniP);
	}

	if (DoShadowFiltering) {
		return CalculateFilteredShadows(
			shadowTexCoord, biasedDepth, projection, casterDistance, randomizerValue,
			ShadowProjection_GetMiniProj(projection).xy, msaaSampleIndex);
	} else {
		return TestShadow(shadowTexCoord, projection, biasedDepth);
	}
}

float ResolveShadows_Cascade(uint cascadeIndex, float4 cascadeNormCoords, int2 randomizerValue, uint msaaSampleIndex)
{
	float2 texCoords;
	float comparisonDistance;
	texCoords = cascadeNormCoords.xy / cascadeNormCoords.w;
	texCoords = float2(0.5f + 0.5f * texCoords.x, 0.5f - 0.5f * texCoords.y);
	comparisonDistance = cascadeNormCoords.z / cascadeNormCoords.w;

	return ResolveShadows(cascadeIndex, texCoords, comparisonDistance, randomizerValue, msaaSampleIndex);
}

float ResolvePointLightShadows(float3 worldPosition, int2 randomizerValue, uint msaaSampleIndex)
{
		// simplified version of ResolveShadows for point lights
	float4 frustumCoordinates;
	float2 texCoords;

		// "orthogonal" shadow projection method doesn't make sense for point light source
		// shadows. In this case, it must be arbitrary
	uint c=0;
	for (;;c++) {
		if (c == 6) {
			return 1.f;
		}

		frustumCoordinates = mul(ShadowWorldToProj[c], float4(worldPosition, 1));
		texCoords = frustumCoordinates.xy / frustumCoordinates.w;
		if (max(abs(texCoords.x), abs(texCoords.y)) < 1.f) {
			break;
		}
	}

	texCoords = float2(0.5f + 0.5f * texCoords.x, 0.5f - 0.5f * texCoords.y);
	float comparisonDistance = frustumCoordinates.z / frustumCoordinates.w;
	float biasedDepth = comparisonDistance - 0.0005f;
	float casterDistance = CalculateShadowCasterDistance(
		texCoords, comparisonDistance, c, msaaSampleIndex,
		DitherPatternValue(randomizerValue));

	float4 miniProj = ShadowProjection_GetMiniProj(c);
	if (!ShadowsPerspectiveProjection) {
			// In orthogonal projection mode, NDC depths are actually linear. So, we can convert a difference
			// of depths in NDC space (like casterDistance) into world space depth easily. Linear depth values
			// are more convenient for calculating the shadow filter radius
		casterDistance = -NDCDepthDifferenceToWorldSpace_Ortho(casterDistance,
			AsMiniProjZW(miniProj));
	}

	if (DoShadowFiltering) {
		return CalculateFilteredShadows(
			texCoords, biasedDepth, c, casterDistance, randomizerValue,
			miniProj.xy, msaaSampleIndex);
	} else {
		return TestShadow(texCoords, c, biasedDepth);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 ResolveLight(	float4 position : SV_Position,
						float2 texCoord : TEXCOORD0,
						float3 viewFrustumVector : VIEWFRUSTUMVECTOR,
						SystemInputs sys) : SV_Target0
{
	// return DebugShadows(texCoord);
	// #if MSAA_SAMPLES>1
	// 	return 1.0.xxxx;
	// #endif

	int2 pixelCoords = position.xy;
	float3 worldPosition = CalculateWorldPosition(pixelCoords, GetSampleIndex(sys), viewFrustumVector);

	// return float4(fmod(worldPosition/10,1.0.xxx),1);
	// float4 frustumCoordinates = mul(ShadowProjection[0], float4(worldPosition, 1));
	// return float4(frustumCoordinates.xyz/frustumCoordinates.w, 1.f);

	// {
	// 	float worldSpaceDepth = GetWorldSpaceDepth(pixelCoords, GetSampleIndex(sys));
	// 	float3 cameraCoordinate = float3(
	// 		( 2.f * texCoord.x - 1.f) / MinimalProjection.x,
	// 		(-2.f * texCoord.y + 1.f) / MinimalProjection.y,
	// 		-1.f) * (worldSpaceDepth * FarClip);
	// 	worldPosition = mul(CameraToWorld, float4(cameraCoordinate, 1)).xyz;
	// 	return float4(fmod(worldPosition/10,1.0.xxx),1);
	// }

		// note, we can use 2 modes for projection here:
		//	by world position:
		//		calculates the world space position of the current pixel,
		//		and then transforms that world space position into the
		//		shadow cascade coordinates
		//	by camera position:
		//		this transforms directly from the NDC coordinates of the
		//		current pixel into the camera frustum space.
		//
		//	In theory, by camera position might be a little more accurate,
		//	because it skips the world position stage. The function has been
		//	optimised for accuracy.
	uint finalCascadeIndex;
	float4 cascadeNormCoords;
	const bool resolveByWorldPosition = false;
	if (resolveByWorldPosition) {
		FindCascade_FromWorldPosition(finalCascadeIndex, cascadeNormCoords, worldPosition);
	} else {
		FindCascade_CameraToShadowMethod(
			finalCascadeIndex, cascadeNormCoords,
			texCoord, GetWorldSpaceDepth(pixelCoords, GetSampleIndex(sys)));
	}

	float shadow = 1.f;		// area outside of all cascades is considered outside of shadow...
	if (finalCascadeIndex < min(GetShadowSubProjectionCount(), ShadowMaxSubProjections)) {
		shadow = ResolveShadows_Cascade(
			finalCascadeIndex, cascadeNormCoords, pixelCoords, GetSampleIndex(sys));
	}

	GBufferValues sample = LoadGBuffer(position, sys);
	float metal = Material_GetMetal(sample);
	float3 diffuse = (1.0f - metal) * LightResolve_Diffuse(sample, NegativeLightDirection, LightColor);
	float3 specular = LightResolve_Specular(sample, normalize(-viewFrustumVector), NegativeLightDirection, LightColor);

	const float lightScale = LightingScale;
	return float4((lightScale*shadow*sample.cookedAmbientOcclusion)*(diffuse + specular), 1.f);
}

float4 ResolvePointLight(	float4 position : SV_Position,
							float2 texCoord : TEXCOORD0,
							float3 viewFrustumVector : VIEWFRUSTUMVECTOR,
							SystemInputs sys) : SV_Target0
{
	// return DebugShadows(texCoord);
	// return float4(0.0.xxx,1);

	int2 pixelCoords = position.xy;
	float3 worldPosition = CalculateWorldPosition(pixelCoords, GetSampleIndex(sys), viewFrustumVector);
	float shadow = ResolvePointLightShadows(worldPosition, pixelCoords, GetSampleIndex(sys));
	GBufferValues sample = LoadGBuffer(position, sys);

	float3 lightVector = (NegativeLightDirection - worldPosition);
	float distanceSq = dot(lightVector, lightVector);
	float attenuation = DistanceAttenuation(distanceSq, LightPower);
	float directionalAttenuation = saturate(dot(lightVector, sample.worldSpaceNormal.xyz) / sqrt(distanceSq));

	float D = distanceSq; D *= D; D *= D;
	float R = LightRadius; R *= R; R *= R; R *= R;
	float radiusDropOff = 1.f - saturate(3.f * D / R);

	float3 light = LightColor.diffuse * directionalAttenuation;
	return float4((attenuation*radiusDropOff*shadow)*sample.diffuseAlbedo.rgb*light, 1.f);
}


#endif
