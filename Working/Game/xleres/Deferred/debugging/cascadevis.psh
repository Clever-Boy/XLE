// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#include "../resolveutil.h"
#include "../resolvecascade.h"
#include "../../Colour.h"
#include "../../Utility/ProjectionMath.h"

float4 main(
    float4 position : SV_Position,
	float2 texCoord : TEXCOORD0,
	float3 viewFrustumVector : VIEWFRUSTUMVECTOR,
	SystemInputs sys : TEXCOORD0) : SV_Target0
{
    int2 pixelCoords = position.xy;
    float3 worldPosition = CalculateWorldPosition(pixelCoords, GetSampleIndex(sys), viewFrustumVector);

    float opacity = 1.f;
    bool A = ((pixelCoords.x + pixelCoords.y)/1)%8==0;
    bool B = ((pixelCoords.x - pixelCoords.y)/1)%8==0;
    if (!(A||B)) { opacity = 0.125f; }

    int finalCascadeIndex;
    float4 cascadeNormCoords;
    const bool resolveByWorldPosition = false;
    if (resolveByWorldPosition) {
        FindCascade_FromWorldPosition(finalCascadeIndex, cascadeNormCoords, worldPosition);
    } else {
        FindCascade_CameraToShadowMethod(
            finalCascadeIndex, cascadeNormCoords,
            texCoord, GetWorldSpaceDepth(pixelCoords, GetSampleIndex(sys)));
    }

    if (finalCascadeIndex >= 0) {
        float4 cols[6]= {
            ByteColor(196, 230, 230, 0xff),
            ByteColor(255, 128, 128, 0xff),
            ByteColor(128, 255, 128, 0xff),
            ByteColor(128, 128, 255, 0xff),
            ByteColor(255, 255, 128, 0xff),
            ByteColor(128, 255, 255, 0xff)
        };
        return float4(opacity * cols[min(6, finalCascadeIndex)].rgb, opacity);
    }

    return 0.0.xxxx;
}
