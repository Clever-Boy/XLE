// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#if !defined(RESOLVE_UNSHADOWED_PSH)
#define RESOLVE_UNSHADOWED_PSH

#include "resolveutil.h"
#include "../Lighting/LightDesc.h"
#include "../Lighting/DirectionalResolve.h"
#include "../System/LoadGBuffer.h"
#include "../Colour.h" // for LightingScale

#if HAS_SCREENSPACE_AO==1
    Texture2D<float>			AmbientOcclusion		: register(t5);
#endif

cbuffer LightBuffer
{
	LightDesc Light;
}

float4 ResolveLightUnshadowed(	float4 position : SV_Position,
								float2 texCoord : TEXCOORD0,
								float3 viewFrustumVector : VIEWFRUSTUMVECTOR,
								SystemInputs sys) : SV_Target0
{
	int2 pixelCoords = position.xy;
	float3 worldPosition = CalculateWorldPosition(pixelCoords, GetSampleIndex(sys), viewFrustumVector);

	GBufferValues sample = LoadGBuffer(position, sys);

	float screenSpaceOcclusion = 1.f;
	#if HAS_SCREENSPACE_AO==1
        screenSpaceOcclusion = LoadFloat1(AmbientOcclusion, pixelCoords, GetSampleIndex(sys));
    #endif

	float3 directionToEye = normalize(-viewFrustumVector);
	float3 diffuse = LightResolve_Diffuse(sample, directionToEye, Light);
	float3 specular = LightResolve_Specular(sample, directionToEye, Light, screenSpaceOcclusion);

	const float lightScale = LightingScale;
	return float4(lightScale*(diffuse + specular), 1.f);
}

float4 ResolvePointLightUnshadowed(	float4 position : SV_Position,
									float2 texCoord : TEXCOORD0,
									float3 viewFrustumVector : VIEWFRUSTUMVECTOR,
									SystemInputs sys) : SV_Target0
{
	// return float4(0.0.xxx,1);

	int2 pixelCoords = position.xy;
	float3 worldPosition = CalculateWorldPosition(pixelCoords, GetSampleIndex(sys), viewFrustumVector);
	GBufferValues sample = LoadGBuffer(position, sys);

	float3 lightVector = (Light.NegativeDirection - worldPosition);
	float distanceSq = dot(lightVector, lightVector);
	float attenuation = DistanceAttenuation(distanceSq, Light.Power);
	float directionalAttenuation = lerp(0.25f, 1.f, saturate(dot(lightVector, sample.worldSpaceNormal.xyz) / sqrt(distanceSq)));

	float D = distanceSq; D *= D; D *= D;
	float R = Light.Radius; R *= R; R *= R; R *= R;
	float radiusDropOff = 1.f - saturate(3.f * D / R);

	float3 light = Light.Color.diffuse * directionalAttenuation;
	return float4((attenuation*radiusDropOff)*sample.diffuseAlbedo.rgb*light, 1.f);
}

#endif
